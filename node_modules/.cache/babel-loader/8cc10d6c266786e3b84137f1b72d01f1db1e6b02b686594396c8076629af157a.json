{"ast":null,"code":"var _jsxFileName = \"E:\\\\Gov Chatbot\\\\gov-ui\\\\src\\\\components\\\\ChatInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChatInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInput = ({\n  addMessage,\n  onSend\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const handleSend = async () => {\n    if (input.trim()) {\n      addMessage(input, 'user');\n      setIsSending(true);\n      setInput('');\n      try {\n        const response = await fetch('http://127.0.0.1:5000/answer', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question: input\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        addMessage(data.answer, 'bot');\n      } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n      }\n      setIsSending(false);\n    }\n\n    // Call the onSend function to hide the h2 tag\n    if (onSend) {\n      onSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyDown: e => e.key === 'Enter' && !isSending && handleSend(),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      disabled: isSending,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInput, \"JoX4E1FCBnrQgA9p0LmawcDzIFs=\");\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatInput","addMessage","onSend","_s","input","setInput","isSending","setIsSending","handleSend","trim","response","fetch","method","headers","body","JSON","stringify","question","ok","Error","data","json","answer","error","console","className","children","type","value","onChange","e","target","onKeyDown","key","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/Gov Chatbot/gov-ui/src/components/ChatInput.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './ChatInput.css';\r\n\r\nconst ChatInput = ({ addMessage, onSend }) => {\r\n  const [input, setInput] = useState('');\r\n  const [isSending, setIsSending] = useState(false);\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n      addMessage(input, 'user');\r\n      setIsSending(true);\r\n      setInput('');\r\n\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:5000/answer', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ question: input })\r\n          \r\n        });\r\n      \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        const data = await response.json();\r\n        addMessage(data.answer, 'bot');\r\n      } catch (error) {\r\n        console.error('There was a problem with the fetch operation:', error);\r\n      }\r\n\r\n      setIsSending(false);\r\n    }\r\n\r\n    // Call the onSend function to hide the h2 tag\r\n    if (onSend) {\r\n      onSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-input\">\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={(e) => e.key === 'Enter' && !isSending && handleSend()}\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={handleSend} disabled={isSending}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIJ,KAAK,CAACK,IAAI,CAAC,CAAC,EAAE;MAChBR,UAAU,CAACG,KAAK,EAAE,MAAM,CAAC;MACzBG,YAAY,CAAC,IAAI,CAAC;MAClBF,QAAQ,CAAC,EAAE,CAAC;MAEZ,IAAI;QACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UAC3DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,QAAQ,EAAEb;UAAM,CAAC;QAE1C,CAAC,CAAC;QAEF,IAAI,CAACM,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClCpB,UAAU,CAACmB,IAAI,CAACE,MAAM,EAAE,KAAK,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;MAEAhB,YAAY,CAAC,KAAK,CAAC;IACrB;;IAEA;IACA,IAAIL,MAAM,EAAE;MACVA,MAAM,CAAC,CAAC;IACV;EACF,CAAC;EAED,oBACEH,OAAA;IAAK0B,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzB3B,OAAA;MACE4B,IAAI,EAAC,MAAM;MACXC,KAAK,EAAExB,KAAM;MACbyB,QAAQ,EAAGC,CAAC,IAAKzB,QAAQ,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAI,CAAC3B,SAAS,IAAIE,UAAU,CAAC,CAAE;MAClE0B,WAAW,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFvC,OAAA;MAAQwC,OAAO,EAAE/B,UAAW;MAACgC,QAAQ,EAAElC,SAAU;MAAAoB,QAAA,EAAC;IAElD;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACnC,EAAA,CAnDIH,SAAS;AAAAyC,EAAA,GAATzC,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}